---
title: 'colorspace: A Python Toolbox for Manipulating and Assessing Colors and Palettes'
tags:
  - Python
  - color palettes
  - color vision
  - visualization
  - assesment
authors:
  - name: Reto Stauffer
    orcid: 0000-0002-3798-5507
    equal-contrib: true
    affiliation: "1, 2"
  - name: Achim Zeileis
    orcid: 0000-0003-0918-3766
    equal-contrib: true
    affiliation: 1
affiliations:
 - name: Department of Statistics, University of Innsbruck
   index: 1
 - name: Digital Science Center, University of Innsbruck
   index: 2
date: 22 July 2024
bibliography: paper.bib
---

```{=html}
<style>
img {
    width: 100%;
    max-width: 100% !important;
    height: auto !important;
}
</style>
```

# Paper requirements (to be deleted)

**TODO: Currently qmd for writing the draft, must - at the end - be a plain md file.
Also contains some css**


* A list of the authors of the software and their affiliations, using the correct format (see the example below).
* A summary describing the high-level functionality and purpose of the software for a diverse, non-specialist audience.
* A Statement of need section that clearly illustrates the research purpose of the software and places it in the context of related work.
* A list of key references, including to other software addressing related needs. Note that the references should include full names of venues, e.g., journals and conferences, not abbreviations only understood in the context of a specific discipline.
* Mention (if applicable) a representative set of past or ongoing research projects using the software and recent scholarly publications enabled by it.
* Acknowledgement of any financial support.

# Summary

The Python _colorspace_ package provides a toolbox for selecting efficient
color palettes, manipulate and assess these colors, and employ them using
existing plotting and graphing libraries such as e.g., _matplotlib_, _seaborn_,
or _plotly_.

One key feature is that the package
provides a variety of color palettes based on the HCL (hue-chroma-luminance)
color space. The three dimension of the HCL color space have been shown
to three perceptual dimensions of the human visual system very well, thus
allowing for intuitive construction of color palettes using trajectories
in this three-dimensional space. Using general strategies, three types of
HCL-based palettes are implemented: Qualitative palettes for categorical
data, sequential palettes for mapping ordered/numeric information, and
diverging palettes for coding ordered/numeric data with a central neutral
value. Besides a variety of predefined HCL-palettes, users can easily
customize these palettes to their needs.

The package provides easy access to transform colors between
different color spaces, allowing to easily implement additional trajectory-based
palettes. Furthermore, a series of functions and methods exist to manipulate and
access sets of colors and/or color palettes, and emulate color vision deficiencies
to check for possible issues with a selected color palette or set of colors.

The lightweight _colorspace_ package supports all Python users in picking (and
testing) custom and effective color maps to get the best out of any visualization.




# Statement of need

Visualization and graphics are often used to communicate scientific results.
However, inefficient color maps can easily break things and have to be
chosen carefully [@Tufte:1990; @Brewer:1999; @Ware:2004; @Wilkinson:2005; @Wilke:2019; @Baum:2019; @Crameri:2020].
Over the past years awareness has risen and many plotting libraries have
changed their default color palette for the better. As one well-known example,
`matplotlib 2.0` was released with an update on mostly all default colors
[@matplotlib20:colors]. Most noticeably 'viridis' replaces the classical 'jet'
color map, a color map very similar to the infamous RGB rainbow color palette,
facing the same problems.

Historically, color palettes were often based on the red-green-blue (RGB)
color space as this is computer and TV screens work. However, RGB based
palettes often have serious issues creating (strongly) imbalanced colors which
can artificially distort information, making figures and graphs hard to digest
by humands, and/or can hardly be read by people with visual constraints.

**Reto: Hier koennte man e.v. noch Tufte oder dieses Psycopapier einbauen (history).**

Thus, people have been working on improved color maps in different areas with
different strategies. More recently and widely known these days
are the 'Brewer palettes' [@harrower:2003], a series of palettes for differen
type of data which all have been manually selected in an experiment, relying on
human perception.

An alternative approach is to use a color space representing the way the human
visual system processes the information. Color models that attempt to capture
these perceptual axes are also called perceptually-based color spaces. Whilst a
series of color models that are (or try to) capture these axis exist. One color
space which has shown to captures these dimensions very well is the
Hue-Chroma-Luminance (HCL) model, the polar representation of the CIELUV color
space. The three dimensions define the following:

* **Hue:** Type of color
* **Chroma:** Colorfullnes
* **Luminance:** Brightness

This allows to define a variety of efficient and well-defined color palettes by
directly controlling the three perceptual dimensions and is the key color model
used by the Python _colorspace_ package, tough other color models are supported
as well. For more details and further references about human visual system and
color perception see e.g., @Kaiser:1996, @Knoblauch:2002, @Ihaka:2003,
@R:dichromat and/or @Zeileis:2007.



# Key functionality

## Color spaces

At the core of the colorspace package are various utilities for computing with
color spaces [@Wiki:Colorspace], as the name conveys. Thus, the package helps to
map various three-dimensional representations of color to each other @Ihaka:2003.
A particularly important mapping is the one from the perceptually-based
and device-independent color model HCL (Hue-Chroma-Luminance; polar representation
of the CIELUV color space) to standard
Red-Green-Blue (sRGB) which is the basis for color specifications in many
systems based on the corresponding hex codes [@Wiki:Webcolors], e.g., in HTML
but also in Python. All color models supported by _colorspace_ and their interconnections
are illustrated in Figure \autoref{fig-colorspaces}

![Illustration of the different color spaces implemented in package and the connection between them. Color models that are (or try to be) perceptually-based are displayed with circles and models that are not are displayed with rectangles.\label{fig-colorspaces}](paper_figure_color_spaces.png)

## Color transformation

Python _colorspace_ allows to define colors colors in one color model
and transform them into another supported colormodel. In the following example,
three colors are defined in the sRGB color model (pure red, green, and blue)
and then transformed into the HCL color space.

```{python}
from colorspace.colorlib import sRGB
cols = sRGB(R = [1, 0, 0], G = [0, 1, 0], B = [0, 0, 1])
print(cols)
```
```{python}
cols.to("HCL")
print(cols)
```
```{python}
cols.colors()
```

`sRGB` is a class for handling one or multiple colors in the sRGB color model.
Using the `.to()` method transforms these colors from sRGB via RGB to CIEXYZ,
CIELUV, to polarLUV (=HCL) as shown in Figure \autoref{fig-colorspaces}.
The method `.colors()` then goes trough the same path in reverse, finally
converting the colors to their hex (web color) representation which are
`#FF0000` (pure red), `#00FF00` (pure green), and `#0000FF` (pure blue).

All color models inherit from the superclass `colorlib`, which allows
to define colors in any of the defined color spaces (Fig. \autoref{fig-colorspaces})
and convert from one to another (if supported).





## Chosing color palettes

A key feature of _colorspace_ is to chose, modify, and create effective
color maps in the HCL color space, making use of the color transformation
library (`colorlib`) shown above.

The three main functions classes are:

* `qualitative_hcl`: Create qualitative HCL-based palettes, designed for coding
    categorical information, i.e., where no
    particular ordering of categories is available and every color should
    receive the same perceptual weight.
* `sequential_hcl`: Create sequential HCL-based palettes, designed for coding
    ordered/numeric information, i.e., going from
    high to low (or vice versa).
* `diverging_hcl`: Create diverging HCL-based palettes, designed for coding
    ordered/numeric information around a central
    neutral value, i.e., where colors diverge from neutral to two extremes.

Figure \autoref{fig-palette-types}

```{python}
#| fig-cap: Example of a qualitative, single-hue sequential, and diverging color palette.
#| label: fig-palette-types
from colorspace import qualitative_hcl, sequential_hcl, diverging_hcl
from colorspace import palette, swatchplot

qual = palette(qualitative_hcl().colors(7), name = "Qualitative")
sequ = palette(sequential_hcl().colors(15), name = "Sequential")
dive = palette(diverging_hcl().colors(15),  name = "Diverging")

swatchplot([qual, sequ, dive], figsize = (6, 1.5));
```

Besides the default palettes shown above, _colorspace_ comes with a variety of
predefined palettes which an be used and customized if needed.
Figure \autoref{fig-hclpalettes} gives an overview of the available presets which
can be accessed by using e.g., `qualitative_hcl("Dark 3")`, `sequential_hcl("ag_Sunset")`,
or `diverging_hcl("Green-Orange")`.

```{python}
#| label: fig-hcl-palettes
from colorspace import hcl_palettes
hcl_palettes(plot = True, figsize = (20, 15))
```




## Assess and manipulate colors

Taking the diverging palette as example, looking at the spectrum reveals how
the palette is constructed in the HCL space. Whilst takes a constant value
on either side of the diverging palette, both luminance and chroma have
a symmetrical change around the neutral center color, with lowest chroma
(thus grayish) and highest luminance (towards white) in the center.


```{python}
#| fig-cap: Spectrum of the default `diverging_hcl()` palette in both the HCL color space (bottom) as well as the sRGB color space (top).
#| label: fig-spectrum
from colorspace import diverging_hcl
diverging_hcl().specplot(rgb = True)
```





## Color transformations


## Use with existing plotting libraries

The HCL-based color palettes can be integrated into commonly used
Python packages for plotting such as 
[`seaborn`](https://seaborn.pydata.org/),
[`plotly`](https://plotly.com/python/), and [`matplotlib`](https://matplotlib.org/).
For the latter all palettes come with a `cmap()` method to generate objects of 
class `LinearSegmentedColormap` as used by by matplotlib, making it straight forward
to be used with most matplotlib plotting functions.

Below, one example on how to use colors based on the _colorspace_ package
with matplotlib, seaborn, and plotly. Several additional examples can be found
on the dedicated articles:

* [HCL-Based Color Scales for matplotlib](/articles/usewith_matplotlib.qmd)
* [HCL-Based Color Scales for seaborn](/articles/usewith_seaborn.qmd)
* [HCL-Based Color Scales for plotly](/articles/usewith_plotly.qmd)

#### Matplotlib

The following figure shows a two-dimensional histogram
(joint density) of the daily minimum and maximum temperature observed
at a weather station in the Harz region in Germany using the
"HarzTraffic" data set. The custom HCL-based palette is provided
as 'cmap' (a `LinearSegmentedColormap`) using the `.cmap()` method.

Whilst the left supblot uses the sequential
HCL-based color palette "ag_Sunset" (reversed), the right plot shows
the same data using the "Blues 2" palette.

```{python matplotlib_minimal}
#| warning: true
#| error: true
#| label: fig-matplotlib

from colorspace import sequential_hcl, dataset
import matplotlib.pyplot as plt

# Loading data
df = dataset("HarzTraffic")

# Creating new figure
fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (10, 5))

ax1.hist2d(df.tempmin, df.tempmax, bins = 20,
           cmap = sequential_hcl("ag_Sunset", rev = True).cmap())
ax2.hist2d(df.tempmin, df.tempmax, bins = 20,
           cmap = sequential_hcl("Blues 2").cmap())

# Setting title and labels
ax1.set_title("Joint density daily min/max temperature")
ax1.set_xlabel("minimum temperature [deg C]")
ax1.set_ylabel("maximum temperature [deg C]")
ax2.set_title("Joint density daily min/max temperature")
ax2.set_xlabel("minimum temperature [deg C]")
plt.show()
```


#### Seaborn

To demonstrate the use of HCL-based colormaps with seaborn, 
the barplot below shows the average number of bikes per day of week (with error bars)
during summer seasons (June, July, August) 2021 to 2023.

```{python seaborn_minimal}
#| fig-cap: Eample of integrating a series of qualitative colors with `seaborn`.
#| label: fig-seaborn
#| warning: true
#| error: true
#| layout-ncol: 1

from colorspace import qualitative_hcl, dataset
import matplotlib.pyplot as plt
import seaborn as sns

# Loading data set
df = dataset("HarzTraffic")
df = df.loc[(df.season == "summer"), :]

sns.barplot(x = "dayofweek", y = "bikes", hue = "dow", data = df,
            order = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
            legend = False,
            palette = qualitative_hcl("Harmonic").colors(7))
plt.title("Average number of bikes per day of week\nsummer season 2021-2023")
plt.show()
```

#### Plotly

Finally, an example using the plotly graphics library is shown.
The interactive plot below shows the daily mean temperature plotted
against the day of year (Julian day) for the three consecutive years
2021, 2022, and 2023 using colors from the (slightly adjusted) diverging HCL-based
color palette "Blue-Red".

```{python plotly_minimal}
from colorspace import diverging_hcl, dataset
import plotly.express as px
import pandas as pd

df = dataset("HarzTraffic")
df["year"] = pd.DatetimeIndex(df.date).year

# Picking three colors from (adjusted) diverging color map
cols = diverging_hcl("Blue-Red", l2 = 60).colors(3)

# Plotting
fig = px.line(df, x = "yday", y = "temp", color = "year",
        title = "Daily mean temperature<br>Sonnenberg, Harz, Germany",
        color_discrete_sequence = cols,
        template = "plotly_white",
        labels = {"yday": "day of year", "temp": "temperature [deg C]"})
fig.write_image("paper_usewith_plotly.pdf")
fig.write_image("paper_usewith_plotly.svg")
```

![Example using colors from a divering palette with `plotly`.\label{fig-plotly}](paper_usewith_plotly.svg)





# Acknowledgements

We acknowledge contributions from Brigitta Sipocz, Syrtis Major, and Semyeong
Oh, and support from Kathryn Johnston during the genesis of this project.

# References
