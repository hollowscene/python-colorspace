---
title: 'colorspace: A Python Toolbox for Manipulating and Assessing Colors and Palettes'
tags:
  - Python
  - color palettes
  - color vision
  - visualization
  - assesment
authors:
  - name: Reto Stauffer
    orcid: 0000-0002-3798-5507
    equal-contrib: true
    affiliation: "1, 2"
  - name: Achim Zeileis
    orcid: 0000-0003-0918-3766
    equal-contrib: true
    affiliation: 1
affiliations:
 - name: Department of Statistics, University of Innsbruck
   index: 1
 - name: Digital Science Center, University of Innsbruck
   index: 2
date: 22 July 2024
bibliography: paper_assets/paper.bib

# MUST BE DELETED @TODO RETO
format:
    html:
        embed-resources: true
---

```{=html}
<style>
img {
    width: 100%;
    max-width: 100% !important;
    height: auto !important;
}
</style>
```

# Paper requirements (to be deleted)

**TODO: Currently qmd for writing the draft, must - at the end - be a plain md file.
Also contains some css**


* A list of the authors of the software and their affiliations, using the correct format (see the example below).
* A summary describing the high-level functionality and purpose of the software for a diverse, non-specialist audience.
* A Statement of need section that clearly illustrates the research purpose of the software and places it in the context of related work.
* A list of key references, including to other software addressing related needs. Note that the references should include full names of venues, e.g., journals and conferences, not abbreviations only understood in the context of a specific discipline.
* Mention (if applicable) a representative set of past or ongoing research projects using the software and recent scholarly publications enabled by it.
* Acknowledgement of any financial support.

# Summary

The Python _colorspace_ package provides a toolbox for selecting efficient
color palettes, manipulate and assess these colors, and employ them using
existing plotting and graphing libraries such as e.g., _matplotlib_, _seaborn_,
or _plotly_.

One key feature is that the package
provides a variety of color palettes based on the HCL (hue-chroma-luminance)
color space. The three dimension of the HCL color space have been shown
to three perceptual dimensions of the human visual system very well, thus
allowing for intuitive construction of color palettes using trajectories
in this three-dimensional space. Using general strategies, three types of
HCL-based palettes are implemented: Qualitative palettes for categorical
data, sequential palettes for mapping ordered/numeric information, and
diverging palettes for coding ordered/numeric data with a central neutral
value. Besides a variety of predefined HCL-palettes, users can easily
customize these palettes to their needs, allowing to easily implement
additional trajectory-based palettes.

Furthermore, _colorspace_ provides a variety of function
to transform, adjust, manipulate and visualize any set of colors or color palette.
This includes taking (existing) color palettes and emulate color vision
deficiencies or calculate contrasts to ensure the set of colors is assessable
for everyone. Overall, the lightweight _colorspace_ package supports all Python
users in picking (and testing) custom and effective color maps to get the best
out of any visualization.




# Statement of need

Visualization and graphics are often used to communicate scientific results.
However, inefficient color maps can easily break things and have to be
chosen carefully [@Tufte:1990; @Brewer:1999; @Ware:2004; @Wilkinson:2005; @Wilke:2019; @Baum:2019; @Crameri:2020].
Over the past years awareness has risen and many plotting libraries have
changed their default color palette for the better. As one well-known example,
`matplotlib 2.0` was released with an update on mostly all default colors
[@matplotlib20:colors]. Most noticeably 'viridis' replaces the classical 'jet'
color map, a color map very similar to the infamous RGB rainbow color palette,
facing the same problems.

One way to construct efficient color palettes with the desired properties is
to construct palettes using a perceptual-based color model, a color space
representing the way the human visual system processes this information.
One such color model is the Hue-Chroma-Luminance (HCL) model, a three
dimensional color space defined by the following three axis:

* **Hue:** The type of color
* **Chroma:** Colorfullnes
* **Luminance:** Brightness

Given the three dimensions represent our perception, the HCL model makes it easy
to construct efficient color palettes with the desired properties.
The _colorspace_ package is not just a collection of fixed palettes, but rather
a set of building blocks to easily create new hand-tailored perceptually-based
palettes or adapt existing ones, by defining trajectories trough the HCL
dimensions. These palettes can easily be employed with existing
plotting and graphing libraries such as `maptlotlib`, `seaborn`, or `plotly`.

In addition, _colorspace_ provides a series of functions and classes for
handling, transforming, manipulating and visualizing sets of color palettes
both, from _colorspace_ but also from any other package. In particular, this
includes functionality to emulate color vision deficiencies to check whether or
not a specific color palette is efficient and accessible by everyone.

Overall, Python _colorspace_ - the Python implementation of the _R_ package
[`colorspace`](https://colorspace.r-forge.r-project.org/) [@Zeileis:2020] - 
is a comprehensive color toolbox going much further than just providing
a series of color palettes.


# Key functionality

## Color spaces

At the core of the colorspace package are various utilities for computing with
color spaces [@Wiki:Colorspace], as the name conveys. Thus, the package helps to
map various three-dimensional representations of color to each other @Ihaka:2003.
A particularly important mapping is the one from the perceptually-based
and device-independent color model HCL (Hue-Chroma-Luminance; polar representation
of the CIELUV color space) to standard
Red-Green-Blue (sRGB) which is the basis for color specifications in many
systems based on the corresponding hex codes [@Wiki:Webcolors], e.g., in HTML
but also in Python. All color models supported by _colorspace_ and their interconnections
are illustrated in Figure \autoref{fig-colorspaces}

![Illustration of the different color spaces implemented in package and the connection between them. Color models that are (or try to be) perceptually-based are displayed with circles and models that are not are displayed with rectangles.\label{fig-colorspaces}](paper_assets/fig_colorspaces.png)





## Chosing color palettes

A key feature of _colorspace_ is to chose, modify, and create effective
color maps in the HCL color space. These are not based on a fixed set of colors but
define trajectories in the HCL space. When drawing a series of colors, these trajectories
are evaluated and (if needed) converted to e.g., standard RGB or HEX colors (web colors)
using the transformations shown in Figure \autofig{fig-palette-types}.
The package provides three main classes of HCL-based color palettes:

* `qualitative_hcl`: Create qualitative HCL-based palettes, designed for coding
    categorical information, i.e., where no
    particular ordering of categories is available and every color should
    receive the same perceptual weight.
* `sequential_hcl`: Create sequential HCL-based palettes, designed for coding
    ordered/numeric information, i.e., going from
    high to low (or vice versa).
* `diverging_hcl`: Create diverging HCL-based palettes, designed for coding
    ordered/numeric information around a central
    neutral value, i.e., where colors diverge from neutral to two extremes.


To show the flexibility, Figure \autoref{fig-chosing-palettes} shows a swatch
plot with four HCL-based sequential color palettes. `pal1` is using a
predefined color palette, the HCL-based 'viridis" palette, whilst `pal2` shows
how this palette is constructed by hand, explicitly defining the properties of
the trajectories. The remaining two start with the settings of the predefined
palette but adjust certain properties. Whilst `pal3` overwrites the chroma
trajectory with a triangular trajectory ending in lower chroma then the
original, `pal4` limits the hue range towards the green-yellow sector.

```{python}
#| label: fig-chosing-palettes
#| fig-cap: Swatches of four sequential palettes constructed using the HCL color space. (`pal1`) Predefined HCL-based viridis palette, (`pal2`) identical but created by hand, (`pal3`/`pal4`) are modified versions with triangular chroma trajectory and reduced hue range.

from colorspace import palette, sequential_hcl, swatchplot

pal1 = sequential_hcl(palette = "viridis")
pal2 = sequential_hcl(h = [300, 75], c = [40, 95], l = [15, 90], power = [1., 1.1])
pal3 = sequential_hcl(palette = "viridis", cmax = 90,  c2 = 20)
pal4 = sequential_hcl(palette = "viridis", h1 = 200)

swatchplot([palette(pal1(7), "By name"),
            palette(pal2(7), "By hand"),
            palette(pal3(7), "With triangular chroma"),
            palette(pal4(7), "With smaller hue range")],
            figsize = (8, 1.75));
```

As mentioned, these HCL-based palettes are not fixed sets of colors but
a special class of object which carry along the definition of the trajectories
which are only evaluated once the user draws a set of colors.

```{python}
print(f"{pal1.settings}")
```

```{python}
[pal1(3), pal1(7)] # Evaluate trajectories, draw 3/7 colors
```


Besides the HCL-based version of 'viridis', _colorspace_ comes with a wide
range of color palettes which can be used directly or used as a starting point
to create customized palettes as demonstrated above. Figure
\autoref{fig-hcl-palettes} gives an overview of the available palettes.

```{python}
#| label: fig-hcl-palettes
#| fig-cap: Overview of all predefined HCL color palettes which can be fully customized and used as a starting point for getting a tailored palette, if needed.
from colorspace import hcl_palettes
hcl_palettes(plot = True, figsize = (20, 15))
```


## Assessing color maps

**RETO: These two plots will be side-by-side, this is just not
possible with specplot, so I'll do it manually in the final manuscript.**


To demonstrate some of the functionality for palette assessment,
Figure \autoref{fig-spectrum} shows a color spectrum plot (left) and
a slice trough the HCL space (right) for color palette `pal4` as defined
in the previous section.

The lower panel of the spectrum plot shows the H, C, and L trajectories
which `pal4` is based on, all monotonically changing from one end of the
palette to the other. The minor kink in the chroma trajectory results from
touching the outer perimeter of the HCL space. This is also visible in the
slice across the HCL space, where the darker half of the palette scrapes
along the outer edge.


```{python}
#| label: fig-spectrum
#| fig-cap: Color spectrum plot (left) and slice across the HCL space for the custom sequential color palette `pal4`.

# Left subplot
pal4.specplot(figsize = (5, 5));
```

```{python}
#| label: fig-hclplot
#| fig-cap: Will be combined with the figure above.

# Right subplot
pal4.hclplot(n = 7, figsize = (5, 5));
```



## Color vision deficiency

Figure \autoref{fig-cvd} shows how badly inefficient color maps can break down.
The figure shows the same data four times, once using a palette based on the 
(in-)famous RGB rainbow (left) and once using the sequential HCL-based palette
'Blue-Yellow' (right). Whilst the top row shows the original colors for people
without visual constraints, the bottom row an emulation of how people with
deteranomaly (colloquially known as 'red-green color blindness') perceive the
same information.

Tough this is an extreme example it illustrates how quickly inefficient color
maps can break, making certain figures and results inaccessible to certain
groups of people. Whilst many better alternatives to the RGB rainbow are easily
available today, the RGB rainbow (and palettes with similar issues) has been
used for decades with little caution, they are still found to be used today.


```{python}
#| label: fig-cvd
#| fig-cap: Example of spatial data using an RGB rainbow based color palette (left) and a sequential HCL palette (right). The top row shows the original colors, the bottom row an emulation how people with deuteranomaly perceive the information.
from colorspace import demoplot, rainbow, sequential_hcl, deutan
from colorspace import diverging_hcl
import matplotlib.pyplot as plt

col1 = rainbow(end = 1/3, rev = True).colors(11)
col2 = sequential_hcl("Blue-Yellow", rev = True).colors(11)

fig, ax = plt.subplots(2, 2, figsize = (10, 5))

demoplot(col1, "Map", ax = ax[0,0], title = "(In-)famous Rainbow palette", ylabel = "original")
demoplot(col2, "Map", ax = ax[0,1], title = "HCL-based Blue-Yellow")
demoplot(deutan(col1), "Map", ax = ax[1,0], ylabel = "deuteranope")
demoplot(deutan(col2), "Map", ax = ax[1,1])
```


Besides `deutan` (emulate deuteranomaly) _colorspace_ allows
to emulate other deficiencies as well. More details and examples can be found
on the [package documentation](https://retostauffer.github.io/python-colorspace/).


## Use with existing plotting libraries


Color palettes made accessible via the _colorspace_ package can easily
be deployed with existing plotting or graphics libraries. Figure \autoref{fig-plotting}
shows two small examples using a data set shipped with the package.

The `matplotlib` figure (left) shows a 2-d histogram of daily minimum and maximum temperatures
for a weather station in Germany, the `seaborn`-based plot (right) the distribution of the
average daily temperature for the same location, separated into seasons.
Whilst a 'cmap' (`.cmap()`; `LinearSegmentedColormap`) is used with `matplotlib, 
`seaborn` just requires a list of HEX colors (`.colors(4)`).


```{python matplotlib_minimal}
#| label: fig-plotting
#| fig-cap: Example of a `matplotlib` `hist2d()` using a custom HCL-based color maps; 2D histograms/joint density of daily minimum and maximum temperature.

from colorspace import dataset
import matplotlib.pyplot as plt

df = dataset("HarzTraffic") # Loading data; requires pandas

# Creating new figure
fig = plt.hist2d(df.tempmin, df.tempmax, bins = 20,
                 cmap = pal3.cmap().reversed())

plt.title("Joint density daily min/max temperature")
plt.xlabel("minimum temperature [deg C]")
plt.ylabel("maximum temperature [deg C]")
plt.show()
```


```{python}
#| fig-desc: Will the the right subplot, next to the one above.

from colorspace import qualitative_hcl, dataset
import seaborn as sns 

df = dataset("HarzTraffic") # Loading data; requires pandas
pal = qualitative_hcl("Dark 3", h1 = -180, h2 = 100) # Color palette

# Creating plot
g = sns.displot(data = df, x = "tempmax", hue = "season", fill = "season",   
                kind = "kde", rug = True, height = 4, aspect = 1,
                palette = pal.colors(4))
g.set_axis_labels("temperature [deg C]")              
g.set(title = "Distribution of daily maximum temperature given season")
plt.tight_layout()
plt.show()
```

Additional examples for `matplotlib`, `seaborn`, and plotly` as well as
information about the data set used can be found in the
[package documentation](https://retostauffer.github.io/python-colorspace/).




# Dependencies and availability

The _colorspace_ package in Python has been developed having a light-weight design
in mind. For the core functionality, the only dependency is the widely used
`numpy` package. For palette assessment (visualizations) `matplotlib` is required.
In addition, `imageio` is needed when using the `cvd_emulator`, and `pandas` if
one is using some of the data sets shipped with the package (see `datasets` documentation).

The package is available via PyPI (latest release candidate) as well as via GitHub
(current development version). Bug reports, software contributions, as well as
suggestions of additional features are welcome. More details can be found in the
[package documentation](https://retostauffer.github.io/python-colorspace/).


# Acknowledgements

**TODO**


# References


