---
title: "HCL Based Heat Color Palette"
---

### Description

Heat hcl, a sequential HCL color palette.

See also: [qualitative_hcl](colorspace.palettes.qualitative_hcl.qmd), [sequential_hcl](colorspace.palettes.sequential_hcl.qmd),
[diverging_hcl](colorspace.palettes.diverging_hcl.qmd), [divergingx_hcl](colorspace.palettes.divergingx_hcl.qmd),
[rainbow_hcl](colorspace.palettes.rainbow_hcl.qmd), [terrain_hcl](colorspace.palettes.terrain_hcl.qmd),
[diverging_hsv](colorspace.palettes.diverging_hsv.qmd), and [rainbow](colorspace.palettes.rainbow.qmd).

### Usage

<pre><code class='language-python'>heat_hcl(h=[0, 90], c=[100, 30], l=[50, 90],<br/>         power=[0.2, 1.0], fixup=True, rev=False,<br/>         *args, **kwargs)</code></pre>

### Arguments

<dl class="pyp-list param-list">
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.heat_hcl:h">h</code><code class="argument-class">list of int</code>
  </dt>
 <dd>escape(Hue parameters (h1/h2).)</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.heat_hcl:c">c</code><code class="argument-class">list of int</code>
  </dt>
 <dd>escape(Chroma parameters (c1/c2).)</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.heat_hcl:l">l</code><code class="argument-class">int</code>
  </dt>
 <dd>escape(Luminance parameters (l1/l2).)</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.heat_hcl:power">power</code><code class="argument-class">list of float</code>
  </dt>
 <dd>escape(Power parameters (p1/p2).)</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.heat_hcl:gamma">gamma</code><code class="argument-class">float</code>
  </dt>
 <dd>escape(Gamma value used for transfiromation from/to sRGB.
@TODO implemented? Check!)</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.heat_hcl:fixup">fixup</code><code class="argument-class">bool</code>
  </dt>
 <dd>escape(Only used when converting the HCL colors to hex.  Should
RGB values outside the defined RGB color space be corrected?)</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.heat_hcl:rev">rev</code><code class="argument-class">bool</code>
  </dt>
 <dd>escape(Should the color map be reversed.)</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.heat_hcl:*args">*args</code>
  </dt>
 <dd>escape(Currently unused.)</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.heat_hcl:**kwargs">**kwargs</code>
  </dt>
 <dd>escape(Additional arguments to overwrite the h/c/l settings.)</dd>
</dl>

### Return

Initialize new object, no return. Raises a set of errors if the parameters
are misspecified. Note that the object is callable, the default object call
can be used to return hex colors (identical to the `.colors()` method),
see examples.

### Methods

<dl class="pyp-list method-list">
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[heat_hcl.cmap(n=101, name=&#x27;custom_hcl_cmap&#x27;)](colorspace.palettes.heat_hcl.cmap.qmd)</code>
    </dt>
    <dd>Get matplotlib Compatible Color Map</dd>
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[heat_hcl.colors(n=11, fixup=True, **kwargs)](colorspace.palettes.heat_hcl.colors.qmd)</code>
    </dt>
    <dd>Get Colors</dd>
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[heat_hcl.get(key)](colorspace.palettes.heat_hcl.get.qmd)</code>
    </dt>
    <dd>Get Specific Palette Setting</dd>
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[heat_hcl.name()](colorspace.palettes.heat_hcl.name.qmd)</code>
    </dt>
    <dd>Get Palette Name</dd>
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[heat_hcl.show_settings()](colorspace.palettes.heat_hcl.show_settings.qmd)</code>
    </dt>
    <dd>Show Palette Settings</dd>
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[heat_hcl.specplot(n=180, *args, **kwargs)](colorspace.palettes.heat_hcl.specplot.qmd)</code>
    </dt>
    <dd>Color Spectrum Plot</dd>
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[heat_hcl.swatchplot(n=7, **kwargs)](colorspace.palettes.heat_hcl.swatchplot.qmd)</code>
    </dt>
    <dd>Palette Swatch Plot</dd>
</dl>


### Examples

```{python}
#| echo: true
#| error: true
#| warning: true
from colorspace.palettes import heat_hcl
pal = heat_hcl()
pal.colors(3)
```

```{python}
#| echo: true
#| error: true
#| warning: true
pal.swatchplot(show_names = False, figsize = (5.5, 0.5));
```

```{python}
#| echo: true
#| error: true
#| warning: true
# The standard call of the object also returns hex colors
heat_hcl()(10)
```



