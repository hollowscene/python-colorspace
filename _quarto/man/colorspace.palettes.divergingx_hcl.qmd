---
title: "Diverging X HCL Color Palettes"
---

### Description

See also: [qualitative_hcl](colorspace.palettes.qualitative_hcl.qmd), [sequential_hcl](colorspace.palettes.sequential_hcl.qmd),
[diverging_hcl](colorspace.palettes.diverging_hcl.qmd), [rainbow_hcl](colorspace.palettes.rainbow_hcl.qmd), [heat_hcl](colorspace.palettes.heat_hcl.qmd),
[terrain_hcl](colorspace.palettes.terrain_hcl.qmd), [diverging_hsv](colorspace.palettes.diverging_hsv.qmd), and
[rainbow](colorspace.palettes.rainbow.qmd).

### Usage

<pre><code class='language-python'>divergingx_hcl(h=[192, 77, 21], c=[40, 35, 100],<br/>               l=[50, 95, 50],<br/>               power=[1.0, 1.0, 1.2, 1.0], cmax=20,<br/>               fixup=True, palette=None, rev=False,<br/>               *args, **kwargs)</code></pre>

### Arguments

<dl class="pyp-list param-list">
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.divergingx_hcl:h">h</code><code class="argument-class">list of float or int</code>
  </dt>
 <dd>escape(Hue values (color), divergingx color palettes should
have different hues for both ends and the center of the palette.
For this class three values must be provided. If input `h` is a str
this argument acts like the `palette` argument (see `palette` input
parameter).)</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.divergingx_hcl:c">c</code><code class="argument-class">list of float or int</code>
  </dt>
 <dd>escape(Chroma value (colorfullness), list of floats. In case two
values are provided the firt is taken as `c1` and `c3` while the second
one is used for `c2` (center value). When three or more are provided
the first three are used for `c1`, `c2`, and `c3`. `cmax1` and `cmax2`
have to provided as extra arguments.)</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.divergingx_hcl:l">l</code><code class="argument-class">list of float or int</code>
  </dt>
 <dd>escape(luminance values (lightness). In case two
values are provided the firt is taken as `c1` and `c3` while the second
one is used for `c2` (center value). When three or more are provided
the first three are used for `c1`, `c2`, and `c3`. `cmax1` and `cmax2`
have to provided as extra arguments.)</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.divergingx_hcl:power">power</code><code class="argument-class">list of float</code>
  </dt>
 <dd>escape(Power parameters for non-linear behaviour of the color
palette. Up to four values can be provided for `p1`, `p2`, `p3`, `p4`.
If two values are provided `power[0]` will be used for `p1` and `p4`
while `power[1]` is used for `p2` and `p3` (symmetric).)</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.divergingx_hcl:cmax">cmax</code><code class="argument-class">list of float or int</code>
  </dt>
 <dd>escape(Maximum chroma. If one value is provided this
will be used for both, `cmax1` and `cmax2`. Else the first two elements
will be used for `cmax1` and `cmax2` respectively.)</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.divergingx_hcl:fixup">fixup</code><code class="argument-class">bool</code>
  </dt>
 <dd>escape(Only used when converting the HCL colors to hex.  Should RGB
values outside the defined RGB color space be corrected?)</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.divergingx_hcl:palette">palette</code><code class="argument-class">str</code>
  </dt>
 <dd>escape(Can be used to load a default diverging color palette
specification. If the palette does not exist an exception will be raised.
Else the settings of the palette as defined will be used to create the
color palette.)</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.divergingx_hcl:rev">rev</code><code class="argument-class">bool</code>
  </dt>
 <dd>escape(Should the color map be reversed.)</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.divergingx_hcl:*args">*args</code>
  </dt>
 <dd>escape(Currently unused.)</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.divergingx_hcl:**kwargs">**kwargs</code>
  </dt>
 <dd>escape(Additional arguments to overwrite the h/c/l settings.  @TODO has
to be documented.)</dd>
</dl>

### Return

Initialize new object, no return. Raises a set of errors if the parameters
are misspecified. Note that the object is callable, the default object call
can be used to return hex colors (identical to the `.colors()` method),
see examples.

### Methods

<dl class="pyp-list method-list">
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[divergingx_hcl.cmap(n=101, name=&#x27;custom_hcl_cmap&#x27;)](colorspace.palettes.divergingx_hcl.cmap.qmd)</code>
    </dt>
    <dd>Get matplotlib Compatible Color Map</dd>
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[divergingx_hcl.colors(n=11, fixup=True, alpha=None, **kwargs)](colorspace.palettes.divergingx_hcl.colors.qmd)</code>
    </dt>
    <dd>Get Colors</dd>
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[divergingx_hcl.get(key)](colorspace.palettes.divergingx_hcl.get.qmd)</code>
    </dt>
    <dd>Get Specific Palette Setting</dd>
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[divergingx_hcl.name()](colorspace.palettes.divergingx_hcl.name.qmd)</code>
    </dt>
    <dd>Get Palette Name</dd>
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[divergingx_hcl.show_settings()](colorspace.palettes.divergingx_hcl.show_settings.qmd)</code>
    </dt>
    <dd>Show Palette Settings</dd>
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[divergingx_hcl.specplot(n=180, *args, **kwargs)](colorspace.palettes.divergingx_hcl.specplot.qmd)</code>
    </dt>
    <dd>Color Spectrum Plot</dd>
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[divergingx_hcl.swatchplot(n=7, **kwargs)](colorspace.palettes.divergingx_hcl.swatchplot.qmd)</code>
    </dt>
    <dd>Palette Swatch Plot</dd>
</dl>


### Examples

```{python}
#| echo: true
#| error: true
#| warning: true
from colorspace import diverging_hcl
a = diverging_hcl()
a.colors(10)
```

```{python}
#| echo: true
#| error: true
#| warning: true
# Different color palette by name
b = diverging_hcl("Blue-Yellow 3")
b.colors(10)
```

```{python}
#| echo: true
#| error: true
#| warning: true
b.swatchplot(show_names = False, figsize = (5.5, 0.5));
```

```{python}
#| echo: true
#| error: true
#| warning: true
# The standard call of the object also returns hex colors
diverging_hcl("Temps")(10)
```



