---
title: "Qualitative HCL Color Palettes"
---

### Description

See also: [sequential_hcl](colorspace.palettes.sequential_hcl.qmd), [diverging_hcl](colorspace.palettes.diverging_hcl.qmd),
[divergingx_hcl](colorspace.palettes.divergingx_hcl.qmd), [rainbow_hcl](colorspace.palettes.rainbow_hcl.qmd), [heat_hcl](colorspace.palettes.heat_hcl.qmd),
[terrain_hcl](colorspace.palettes.terrain_hcl.qmd), [diverging_hsv](colorspace.palettes.diverging_hsv.qmd), and
[rainbow](colorspace.palettes.rainbow.qmd).

Argument `h` uses a list with `[0, lambda x: 360. * (n - 1.) / n]` by default
such that the colors drawn from the palet are uniformly distributed around the
circle (`[0., 360.]`).

### Usage

<pre><code class='language-python'>qualitative_hcl(h=[0, &lt;function qualitative_hcl.&lt;lambda&gt; at 0x7a9ae297c900&gt;],<br/>                c=80, l=60, fixup=True,<br/>                palette=None, rev=False, **kwargs)</code></pre>

### Arguments

<dl class="pyp-list param-list">
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.qualitative_hcl:h">h</code><code class="argument-class">int, float, list</code>
  </dt>
 <dd>Hue values defining the 'color'. Qualitative color
palettes require two hues. If more than two values are provided the first
two will be used while the rest is ignored.  If input `h` is a str this
argument acts like the `palette` argument (see `palette` input parameter).
Can also be lambda functions or a list of lambda functions which take up
one single argument `n` (number of colors; see default value).</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.qualitative_hcl:c">c</code><code class="argument-class">int, float</code>
  </dt>
 <dd>Chroma value (colorfullness), a single numeric value. If
multiple values are provided only the first one will be used.</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.qualitative_hcl:l">l</code><code class="argument-class">int, float</code>
  </dt>
 <dd>luminance value (lightness), a single numeric value. If
multiple values are provided only the first one will be used.</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.qualitative_hcl:fixup">fixup</code><code class="argument-class">bool</code>
  </dt>
 <dd>Only used when converting the HCL colors to hex.  Should RGB
values outside the defined RGB color space be corrected?</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.qualitative_hcl:palette">palette</code><code class="argument-class">None, str</code>
  </dt>
 <dd>Can be used to load a default diverging color
qpalette specification. If the palette does not exist an exception will be
qraised.  Else the settings of the palette as defined will be used to create
qthe color palette.</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.qualitative_hcl:rev">rev</code><code class="argument-class">bool</code>
  </dt>
 <dd>Should the color map be reversed? Default `False`.</dd>
  <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
   <code id="colorspace.palettes.qualitative_hcl:**kwargs">**kwargs</code>
  </dt>
 <dd>Additional arguments to overwrite the h/c/l settings. TODO: has to be documented.</dd>
</dl>

### Return

Initialize new object. Raises exceptions if the parameters are
misspecified. Note that the object is callable, the default object call can
be used to return hex colors (identical to the `.colors()` method), see
examples.

### Methods

<dl class="pyp-list method-list">
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[qualitative_hcl.cmap(n=101, name=&#x27;custom_hcl_cmap&#x27;)](colorspace.palettes.qualitative_hcl.cmap.qmd)</code>
    </dt>
    <dd>Get matplotlib Compatible Color Map</dd>
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[qualitative_hcl.colors(n=11, fixup=None, **kwargs)](colorspace.palettes.qualitative_hcl.colors.qmd)</code>
    </dt>
    <dd>Get Colors</dd>
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[qualitative_hcl.get(key)](colorspace.palettes.qualitative_hcl.get.qmd)</code>
    </dt>
    <dd>Get Specific Palette Setting</dd>
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[qualitative_hcl.name()](colorspace.palettes.qualitative_hcl.name.qmd)</code>
    </dt>
    <dd>Get Palette Name</dd>
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[qualitative_hcl.show_settings()](colorspace.palettes.qualitative_hcl.show_settings.qmd)</code>
    </dt>
    <dd>Show Palette Settings</dd>
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[qualitative_hcl.specplot(n=180, *args, **kwargs)](colorspace.palettes.qualitative_hcl.specplot.qmd)</code>
    </dt>
    <dd>Color Spectrum Plot</dd>
    <dt style = "white-space: nowrap; font-family: monospace; vertical-align: top">
       <code>[qualitative_hcl.swatchplot(n=7, **kwargs)](colorspace.palettes.qualitative_hcl.swatchplot.qmd)</code>
    </dt>
    <dd>Palette Swatch Plot</dd>
</dl>


### Examples

```{python}
#| echo: true
#| error: true
#| warning: true
from colorspace import qualitative_hcl
a = qualitative_hcl()
a.colors(10)
```

```{python}
#| echo: true
#| error: true
#| warning: true
b = qualitative_hcl("Warm")
b.colors(10)
```

```{python}
#| echo: true
#| error: true
#| warning: true
b.swatchplot(show_names = False, figsize = (5.5, 0.5));
```

```{python}
#| echo: true
#| error: true
#| warning: true
# The standard call of the object also returns hex colors
qualitative_hcl("Warm")(10)
```




### Raises

<ul class="python-raises">
<li><code class="text-warning">TypeError</code>: If `h` is not a single int or float, or a list (see next).
<li><code class="text-warning">TypeError</code>: If `h` is a list but not all elements are of type int, float, or 
callable (lambda functions).
</ul>

