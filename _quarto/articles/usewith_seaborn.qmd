---
title: "HCL-Based Color Scales for seaborn"
---



## Scatterplot

The following example shows the number of motorbikes recorded by an automatic
traffic counting station in the Harz Mountains (Germany), an region very
popular with bikers. The number of bikes (y-axis) is plotted against the daily
mean temperature (x-axis) and colored by season using custom colors from the
HCL-based qualitative color palette "Dark 3".

```{python seaborn_example_1}
#| warning: true
#| error: true

from colorspace import qualitative_hcl, dataset 
import pandas as pd
import plotly.express as px

# Loading HarzTraffic data set
df = dataset("HarzTraffic")       

# Creating plot
fig = px.scatter(df, x = "temp", y = "bikes", color = "season",
        labels = {"temp": "daily mean temperature [deg C]", "bikes": "number of bikes"},
        title = "Number of bikes per day given season<br>Sonnenberg, Harz, Germany",    
        color_discrete_sequence = qualitative_hcl()(4))         
fig.update_traces(marker = dict(size = 7))   
fig.update_layout(template = "plotly_white")
fig.show() 
```


## Multi-group histogram

The next example shows a multi-group distribution plot (`kind = "kde"`) based
on the 'HarzTraffic' data set where the distribution of the daily maximum temperature
is shown given the prevailing season. Again, the sequential HCL-based color palette
"Dark 3" is used.

```{python seaborn_example_2}
#| warning: true
#| error: true

from colorspace import qualitative_hcl, dataset
from matplotlib import pyplot as plt
import seaborn as sns 

# Loading penguins data set
df = dataset("HarzTraffic")

# Creating plot
g = sns.displot(data = df, x = "tempmax", hue = "season", fill = "season",     
                kind = "kde", rug = True, height = 4, aspect = 3,
                palette = qualitative_hcl("Dark 3", rev = True).colors(4))                  
g.set_axis_labels("daily maximum temperature [deg C]")
plt.show()
```

## Heatmap

HCL-based color maps (`LinearSegmentedColormap` objects) can be used directly
for seaborn heatmaps, here employing the sequential HCL-based "YlOrRd" (yellow-orange-red)
palette in reverse order (`rev = True`).

```{python seaborn_example_3}
#| warning: true
#| error: true

from colorspace import sequential_hcl
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
 
# Simulate data from a bivariate Gaussian 
n    = 10000 
mean = [0, 0] 
cov  = [(2, .4), (.4, .2)] 
rng  = np.random.RandomState(0) 
x, y = rng.multivariate_normal(mean, cov, n).T 
 
# Draw heatmap
sns.histplot(x = x, y = y, bins = 50, pthresh = .1,             
             cmap = sequential_hcl("YlOrRd", rev = True).cmap())
plt.show()
```

In addition to pre-defined palettes, fully custom color maps can
be defined and used for plotting. Here the matplotlib `.reverse()` method
is used to reverse the colormap, which could also be done when specifying
the `sequential_hcl()` palette.

```{python seaborn_example_3_1}
#| warning: true
#| error: true

from colorspace import sequential_hcl
import seaborn as sns
import matplotlib.pyplot as plt

# Create fully customized HCL-based sequential palette
custom_cmap = sequential_hcl(h = [330, 170], c = [45, 70, 10],
                             l = [25, 95], power = [0.5, 1.5]).cmap().reversed()

# Draw heatmap
sns.histplot(x = x, y = y, bins = 50, pthresh = .1,             
             cmap = custom_cmap)
plt.show()
```








