
Publishing package
------------------

* https://www.youtube.com/watch?v=GIF3LaRqgXo&ab_channel=CodingTech


Todo
----

* `specplot()` does not have a smoother for the line; loess smoother in R

Missing features
----------------

* Demoplot: Currently no implementation for clustered scatter plot (clustering algorithm required)
    and perspective (requires `perspective = "3d"` axis; currently gets 2t axis only).
* `mixcolor()` only allows for mixing in `"RGB"` and `"XYZ"` now; are there others where
    linear mixing is OKish?

Gamma handling
--------------

The colorobjects should maybe have a _gamma attribute
which is used and can be set when initializing the
colorobject. Only used hex to sRGB and vice versa, but
cannot be properly set at the moment.

To be implemented
-----------------

Based on colorspace Namespace

* export(lighten)
* export(darken)
* export(max_chroma)
* export(carto_hcl)
* export(mixcolor)

To check
--------

* https://seaborn.pydata.org/tutorial/color_palettes.html
    * https://cfwebprod.sandia.gov/cfdocs/CompResearch/docs/ColorMapsExpanded.pdf
    * https://matplotlib.org/users/colormaps.html


BUG in python-colorspace
------------------------
[ ] Integer inputs yeild 0-colors in sRGB! Why?
```
from colorspace.colorlib import RGB
cols = RGB([1,0,0],[0,1,0],[0,0,1])
print cols
cols.to("sRGB")
print cols
```

BUG in R colorspace
-------------------
[ ] specplot uses equidistant rectangles, but having
    the two most outer ones only half of the width of the
    ones in the middle might be more appropriate.

BUG in R colorspace
-------------------
[X] Bug in interpolate_cvd_transform.
    The second case statement should for sure be >= 11. Report

```
    if ( severity <= 0 ) {
        cvd[[1]]
    } else if ( severity >= 1 ) {
        cvd[[11]]
    } else {
        ...
    }
```

logging
-------
[X] The logging package causes problems in rmarkdown/python.
    Hm. Done, can now be controlled via CSLOGLEVEL environment
    variable.

Palette functions
-----------------
[X] Make palette objects __call__'able and return some colors,
    most probably the hex colors. Then, rewrite the colors
    method to something like colors(n = 10, type_ = "hex")
    such that it returns 'n' colors of type 'type_' (a
    color object).

Plotting function
-----------------
[X] Add as "specplot" method to the hclpalette objects
    which plots the colormap as a bar or circle (optional).
    Could depend on a palettes.colorbarplot which should then
    also be used in the specplot function.

Setting parameters
------------------
[ ] hclpalette.set(**kwargs) to set all allowed parameters
    and a functionality to allow to set h = [h1,h2] if
    possible. Use _checkinputs_.
[ ] Implemented but has to be tested.


